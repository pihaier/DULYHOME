name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # 빌드 및 타입 체크
  build:
    name: Build and Type Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./nextjs_flexy

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: ./nextjs_flexy/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: TypeScript type check
      run: npm run type-check

    - name: Run ESLint
      run: npm run lint
      # AI 개발 환경: 린트 에러 시 배포 차단

    - name: Check for console.log statements
      run: |
        echo "🔍 Checking for console.log statements..."
        if grep -r "console\.log" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --exclude-dir=node_modules; then
          echo "⚠️ Warning: console.log found in production code. Consider removing them."
          echo "This is currently a warning. Will become an error in the future."
        else
          echo "✅ No console.log statements found."
        fi

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || vars.SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || vars.SUPABASE_ANON_KEY }}
        SUPABASE_URL: ${{ vars.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ vars.SUPABASE_ANON_KEY }}

  # Vercel 자동 배포는 Vercel GitHub Integration이 처리하므로 여기서는 제거
  # Supabase 마이그레이션도 Supabase GitHub Integration이 처리

  # 배포 후 스모크 테스트
  smoke-test:
    name: Post-Deploy Smoke Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Wait for Vercel deployment
      run: sleep 60  # Vercel 배포 완료 대기
      
    - name: Health Check
      run: |
        echo "🔍 Running smoke tests..."
        
        # 프로덕션 URL (환경변수로 설정 가능)
        # Vercel 프로젝트명이 변경될 수 있으므로 환경변수 사용 권장
        URL="${{ vars.PRODUCTION_URL || 'https://dulyhome.vercel.app' }}"
        
        echo "Testing URL: $URL"
        
        # 1. 홈페이지 체크
        echo "Checking homepage..."
        STATUS=$(curl -s -o /dev/null -w "%{http_code}" $URL)
        if [ $STATUS -eq 200 ]; then
          echo "✅ Homepage: OK ($STATUS)"
        elif [ $STATUS -eq 404 ]; then
          echo "⚠️ Homepage: URL not found (HTTP $STATUS) - Check PRODUCTION_URL variable"
          echo "Skipping further tests..."
          exit 0  # 일시적으로 성공으로 처리
        else
          echo "❌ Homepage: Failed (HTTP $STATUS)"
          exit 1
        fi
        
        # 2. Health API 체크
        echo "Checking health API..."
        HEALTH=$(curl -s "$URL/api/health")
        if echo $HEALTH | grep -q '"status":"healthy"'; then
          echo "✅ Health API: OK"
        else
          echo "⚠️ Health API: Degraded"
          echo "$HEALTH"
        fi
        
        # 3. 주요 페이지 체크
        PAGES=("/dashboard" "/auth/customer/login" "/application/inspection")
        for PAGE in "${PAGES[@]}"; do
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL$PAGE")
          if [ $STATUS -eq 200 ] || [ $STATUS -eq 307 ] || [ $STATUS -eq 308 ]; then
            echo "✅ $PAGE: OK ($STATUS)"
          else
            echo "⚠️ $PAGE: Warning (HTTP $STATUS)"
          fi
        done
        
        echo "✅ Smoke tests completed"